/**
 * @package   libcrc++: C++ library for universal CRC calculation.
 * @brief     Library test / demo program: generic CRC calculator.
 * @author    José Luis Sánchez Arroyo
 * @section   License
 * Copyright (c) 2017 - 2025 José Luis Sánchez Arroyo
 * This software is distributed under the terms of the MIT license and comes WITHOUT ANY WARRANTY.
 * Please read the file LICENSE for further details.
 */

#include "libcrc++.h"
#include <iostream>
#include <iomanip>
#include <strings.h>
#include <unistd.h>         // getopt

enum PrintStyles
{
    no_style,
    c_style,
    dec_style,
    hex_style
};

/**
 * @brief     Banner
 */
void Banner()
{
    std::cout << "test_libcrc++ v1.0" << std::endl;
}

/** -----------------------------------------------------
 * @brief     Wrapper class of the objects to calculate CRC
 * ------ */
class CrcWrapper
{
public:
    CrcWrapper(
        int p_bits,
        libcrc::ShiftDir p_dir,
        uint64_t p_poly
    );

    const uint8_t*
    getLookupTable();

    uint64_t
    compute(
        uint8_t* data,
        size_t size,
        uint64_t seed
    );

private:
    libcrc::CrcFastCalc<uint8_t,  libcrc::shiftLeft>  calc_8_l;
    libcrc::CrcFastCalc<uint16_t, libcrc::shiftLeft>  calc_16_l;
    libcrc::CrcFastCalc<uint32_t, libcrc::shiftLeft>  calc_32_l;
    libcrc::CrcFastCalc<uint64_t, libcrc::shiftLeft>  calc_64_l;
    libcrc::CrcFastCalc<uint8_t,  libcrc::shiftRight> calc_8_r;
    libcrc::CrcFastCalc<uint16_t, libcrc::shiftRight> calc_16_r;
    libcrc::CrcFastCalc<uint32_t, libcrc::shiftRight> calc_32_r;
    libcrc::CrcFastCalc<uint64_t, libcrc::shiftRight> calc_64_r;

    int selector;
};

CrcWrapper::CrcWrapper(int p_bits, libcrc::ShiftDir p_dir, uint64_t p_poly)
   : calc_8_l(p_poly), calc_16_l(p_poly), calc_32_l(p_poly), calc_64_l(p_poly), calc_8_r(p_poly), calc_16_r(p_poly), calc_32_r(p_poly), calc_64_r(p_poly)
{
    switch (p_bits)
    {
        case 8:
        case 16:
        case 32:
        case 64:
            break;
        default:
            std::cerr << "CRC calculation of " << p_bits << " is not supported.\n\n";
            exit(-1);
    }
    selector = p_bits + (p_dir == libcrc::shiftLeft? 0 : 1);
}

const uint8_t* CrcWrapper::getLookupTable()
{
    switch (selector)
    {
        case 8:
            return reinterpret_cast<const uint8_t*>(calc_8_l.getLookupTable());
        case 16:
            return reinterpret_cast<const uint8_t*>(calc_16_l.getLookupTable());
        case 32:
            return reinterpret_cast<const uint8_t*>(calc_32_l.getLookupTable());
        case 64:
            return reinterpret_cast<const uint8_t*>(calc_64_l.getLookupTable());
        case 9:
            return reinterpret_cast<const uint8_t*>(calc_8_r.getLookupTable());
        case 17:
            return reinterpret_cast<const uint8_t*>(calc_16_r.getLookupTable());
        case 33:
            return reinterpret_cast<const uint8_t*>(calc_32_r.getLookupTable());
        case 65:
            return reinterpret_cast<const uint8_t*>(calc_64_r.getLookupTable());
    }
    std::cerr << "Invalid selector: " << selector << std::endl;
    exit(-1);
    return 0;
}

uint64_t CrcWrapper::compute(uint8_t* data, size_t size, uint64_t seed)
{
  switch (selector)
  {
      case 8:
          return calc_8_l.compute(data, size, seed);
      case 16:
          return calc_16_l.compute(data, size, seed);
      case 32:
          return calc_32_l.compute(data, size, seed);
      case 64:
          return calc_64_l.compute(data, size, seed);
      case 9:
          return calc_8_r.compute(data, size, seed);
      case 17:
          return calc_16_r.compute(data, size, seed);
      case 33:
          return calc_32_r.compute(data, size, seed);
      case 65:
          return calc_64_r.compute(data, size, seed);
  }
  std::cerr << "Invalid selector: " << selector << std::endl;
  exit(-1);
  return 0;
}

/** ----------------------------------------------------
 * @brief     Create and show a CRC lookup table.
 * ------ */
void GenerateTable(PrintStyles style, int bits, libcrc::ShiftDir dir, uint64_t poly)
{
    CrcWrapper crc_calculator(bits, dir, poly);
    const void* tabla = crc_calculator.getLookupTable();
    const char* pre = "";
    const char* post = "";
    int width = bits / 4;

    switch (style)
    {
        case c_style:
            std::cout << "\n/** @brief  Autogenerated lookup table for CRC calculation\n"
                      << " *  @note   Algorithm: CRC" << bits << std::endl
                      << " *  @note   Polynomial : 0x" << std::hex << std::setw(bits/4) << std::setfill('0') << poly << std::endl
                      << " */\n"
                      << "uint" << bits << "_t lookup_table[] =\n"
                      << "{\n  ";
            pre = "0x";
            post = ",";
            break;

        case dec_style:
            std::cout << "\nAutogenerated CRC lookup table - Algorithm: CRC" << bits << " - Polynomial: 0x" << std::hex << std::uppercase << std::setw(bits/4) << std::setfill('0') << poly << "\n  " << std::dec;
            width = (bits * 3) / 10;
            break;

        case hex_style:
            std::cout << "\nAutogenerated CRC lookup table - Algorithm: CRC" << bits << " - Polynomial: 0x" << std::hex << std::uppercase << std::setw(bits/4) << std::setfill('0') << poly << "\n  ";
            break;

        default:
            std::cerr << "Oops! This shouldn't happen!" << std::endl;
            exit(-1);
    }

    int ix;
    switch (bits)
    {
        case 8:
            for (ix = 0; ix < 255; ++ix)
                std::cout << pre << std::setw(width) << static_cast<unsigned>(reinterpret_cast<const uint8_t*>(tabla)[ix]) << post << (ix % 8 == 7? "\n  " : " ");
            std::cout << pre << std::setw(width) << static_cast<unsigned>(reinterpret_cast<const uint8_t*>(tabla)[ix]) << "\n";
            break;

        case 16:
            for (ix = 0; ix < 255; ++ix)
                std::cout << pre << std::setw(width) << reinterpret_cast<const uint16_t*>(tabla)[ix] << post << (ix % 8 == 7? "\n  " : " ");
            std::cout << pre << std::setw(width) << reinterpret_cast<const uint16_t*>(tabla)[ix] << "\n";
            break;

        case 32:
            for (ix = 0; ix < 255; ++ix)
                std::cout << pre << std::setw(width) << reinterpret_cast<const uint32_t*>(tabla)[ix] << post << (ix % 8 == 7? "\n  " : " ");
            std::cout << pre << std::setw(width) << reinterpret_cast<const uint32_t*>(tabla)[ix] << "\n";
            break;

        case 64:
            for (ix = 0; ix < 255; ++ix)
                std::cout << pre << std::setw(width) << reinterpret_cast<const uint64_t*>(tabla)[ix] << post << (ix % 8 == 7? "\n  " : " ");
            std::cout << pre << std::setw(width) << reinterpret_cast<const uint64_t*>(tabla)[ix] << "\n";
            break;
    }

    if (style == c_style)
        std::cout << "};\n";
}

/** ------------------------------------------------------
 * @brief     Read a file and compute its CRC using the specified algorithm
 * ------ */
void CalculateCrc(const char* fname, int bits, libcrc::ShiftDir dir, uint64_t poly, uint64_t seed)
{
    CrcWrapper crc_calculator(bits, dir, poly);
    FILE* f = fopen(fname, "r");
    if (f == nullptr)
    {
        std::cerr << "Error opening file " << fname << std::endl;
        exit(-1);
    }

    uint64_t crc = seed;
    uint8_t buffer[4096];

    while (!feof(f))
    {
        int lesen = fread(buffer, 1, 4096, f);
        if (lesen <= 0)
            break;
        crc = crc_calculator.compute(buffer, lesen, crc);
    }
    fclose(f);

    uint64_t xor_mask = 0;
    for (int i = 0; i < bits; ++i)
        xor_mask |= 1L << i;
    std::cout << "File      : " << fname << std::endl
              << "Algorithm : CRC" << bits << std::endl
              << "Polynomial: " << std::hex << std::uppercase << std::setw(bits/4) << std::setfill('0') << poly << std::endl
              << "Seed      : " << std::hex << std::uppercase << std::setw(bits/4) << std::setfill('0') << seed << std::endl
              << "CRC       : " << std::hex << std::uppercase << std::setw(bits/4) << std::setfill('0') << crc << std::endl
              << "XOR CRC   : " << std::hex << std::uppercase << std::setw(bits/4) << std::setfill('0') << (crc ^ xor_mask) << std::endl;
}

/** ----------------------------------------------------
 * @brief   Print help and exit.
 * ------ */
void Abort(const char* prog)
{
    std::cout << prog << " : CRC polynomial calculator and lookup table generator.\n"
        "Syntax: " << prog << " -h | [ -f <file> | -t <format> ] -b <bits> -d <direction> -p <polynomial> [-s <seed>]\n"
        "  -h : This help\n"
        "  -f : Calculate a CRC of a file\n"
        "       <file>      : File to read for calculating its CRC\n"
        "  -t : Generate a CRC lookup table\n"
        "       <format>    : Formato de la tabla: { 'c', 'dec', 'hex'}\n"
        "  -b : CRC length in bits\n"
        "       <bits>      : Number of bits of the CRC (8, 16, 32, 64)\n"
        "  -d : Input bits direction [left]\n"
        "       <direction> : l = left, r = right\n"
        "  -p : Polynomial to use\n"
        "       <polynomial>: Bitmask of the polynomial coefficients, in the order specified above\n"
        "  -s : Calculation seed [0]\n"
        "       <seed>      : Starting calculation value [0]\n"
        ;
    exit(-1);
}

/** ----------------------------------------------------
 * @brief   main
 * ------*/
int main(int argc, char* argv[])
{
    Banner();

    if (argc < 2)
    {
        std::cerr << "Run '" << argv[0] << " -h' for a list of options." << std::endl;
        exit(-1);
    }

    /*--- Command-line processing ---*/
    const char* fname = nullptr;
    PrintStyles format = no_style;
    int bits = 0;
    libcrc::ShiftDir dir = libcrc::shiftLeft;
    uint64_t poly = 0;
    uint64_t seed = 0;


    for (bool stop = false; stop == false; )
    {
        switch (getopt(argc, argv, "hf:t:b:d:p:s:"))
        {
            case 'h':
                Abort(argv[0]);
                break;

            case 'f':                                   // Calculate CRC of a file
                if (format != no_style)
                {
                  std::cerr << "Please specify either -f or -t." << std::endl;
                  exit(-1);
                }
                fname = optarg;
                break;

            case 't':                                   // Generate lookup table
                if (fname != nullptr)
                {
                    std::cerr << "Please specify either -f or -t." << std::endl;
                    exit(-1);
                }
                if (strcasecmp(optarg, "c") == 0)
                    format = c_style;
                else if (strcasecmp(optarg, "dec") == 0)
                    format = dec_style;
                else if (strcasecmp(optarg, "hex") == 0)
                    format = hex_style;
                else
                {
                    std::cerr << "Format " << optarg << " unknown" << std::endl;
                    exit(-1);
                }
                break;

            case 'b':
                bits = strtoul(optarg, 0, 0);
                if (bits < 8 || bits > 64)
                {
                    std::cerr << "Allowed bit lengths are: 8, 16, 32, 64." << std::endl;
                    exit(-1);
                }
                break;

            case 'p':
                poly = strtoull(optarg, 0, 0);
                break;

            case 's':
                seed = strtoull(optarg, 0, 0);
                break;

            case 'd':
                if (toupper(*optarg) == 'L')
                    dir = libcrc::shiftLeft;
                else if (toupper(*optarg) == 'R')
                    dir = libcrc::shiftRight;
                else
                {
                    std::cerr << "Invalid argument: " << optarg << std::endl;
                    exit(-1);
                }
                break;

            case -1:
                stop = true;
                break;

            default:
                std::cerr << "Invalid argument." << std::endl;
                exit(-1);
                break;
        }
    }

    /*--- Do the calculation ---*/
    if (format != no_style)
      GenerateTable(format, bits, dir, poly);
    else if (fname != nullptr)
      CalculateCrc(fname, bits, dir, poly, seed);
    else
      std::cerr << "Please specify either '-f' or '-t'" << std::endl;
}
